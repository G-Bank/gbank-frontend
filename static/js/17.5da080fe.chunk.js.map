{"version":3,"sources":["ui-component/cards/MainCard.js","utils/convertor/TomanConvertor.js","assets/images/icons/tether.svg","assets/images/icons/rial.svg","views/transfer/index.js"],"names":["MainCard","_ref","title","titleButton","children","_jsxs","Box","my","width","display","alignItems","gap","_jsx","Typography","variant","mt","p","borderRadius","bgcolor","splitCardNumber","number","toString","split","reverse","join","replace","Numbers","getPersianNumber","_numbers","arguments","length","undefined","_string","i","len","Texts","getPersianTextOfNumber","TomanConverter","toman","_Fragment","concat","useStyles","makeStyles","theme","cardContent","padding","accountContainer","maxHeight","overflowY","TransferPage","classes","_useState","useState","_useState2","_slicedToArray","accountWallet","setLimit","_useState3","_useState4","accounts","setAccounts","_useState5","to_account_id","from_account_id","amount","currency","description","_useState6","userOptions","setUserOpts","account","useSelector","state","useEffect","axios","get","configData","API_SERVER","headers","Authorization","token","then","response","data","catch","error","console","log","results","sx","Grid","container","item","xs","sm","md","border","elevation","content","CardContent","className","direction","spacing","strings","selectTypeOfTransfer","currentWallet","List","component","ListItemButton","ListItemIcon","Avatar","alt","src","tether","height","ListItemText","primary","limit","usdt","rial","irr","messageForSelect","map","value","ListItem","secondaryAction","Radio","edge","onClick","_objectSpread","checked","inputProps","disablePadding","ListItemAvatar","picture","medium","id","name","first","last","Divider","Loader"],"mappings":"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","file":"static/js/17.5da080fe.chunk.js","sourcesContent":["import { Box, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\n\nconst MainCard = ({ title, titleButton, children }) => {\n  return (\n    <Box my={2} width=\"100%\">\n      <Box display='flex' alignItems='center' gap={1}>\n        <Typography variant=\"h4\">{title}</Typography>\n        {titleButton}\n      </Box>\n      {children && (\n        <Box mt={1} p={2} borderRadius={4} width=\"100%\" bgcolor=\"white\">\n          {children}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nMainCard.propTypes = {\n  title: PropTypes.string,\n  titleButton: PropTypes.node,\n  children: PropTypes.node,\n};\n\nexport default MainCard;\n","const TomanConverter = (toman) => {\n  return <>{toman === 0 || toman === '0' ? <span>رایگان</span> : `${(toman * 10).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`}</>;\n};\n\nconst numberWithCommas = (amount) => amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\nexport const splitCardNumber = (number) =>\n  number.toString()\n    .split('')\n    .reverse()\n    .join('')\n    .replace(/\\B(?=(\\d{4})+(?!\\d))/g, ' ')\n    .split('')\n    .reverse()\n    .join('');\n\nconst Numbers = {\n  1: '۱',\n  2: '۲',\n  3: '۳',\n  4: '۴',\n  5: '۵',\n  6: '۶',\n  7: '۷',\n  8: '۸',\n  9: '۹',\n  0: '۰'\n};\nexport const getPersianNumber = (number, commaSeparated = true) => {\n  if (!number) {\n    return '';\n  }\n  const _numbers = commaSeparated ? numberWithCommas(number) : number.toString();\n  let _string = '';\n  for (let i = 0, len = _numbers.length; i < len; i++) {\n    if (Numbers[_numbers[i]]) {\n      _string += Numbers[_numbers[i]];\n    } else {\n      _string += _numbers[i];\n    }\n  }\n  return _string;\n};\n\nconst Texts = {\n  0: 'صفر',\n  1: 'یک',\n  2: 'دو',\n  3: 'سه'\n};\n\nexport const getPersianTextOfNumber = (number) => Texts[number];\n\nexport default TomanConverter;\n","export default __webpack_public_path__ + \"static/media/tether.1db279ea.svg\";","export default __webpack_public_path__ + \"static/media/rial.58b66d8b.svg\";","import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\n// third party\nimport axios from 'axios';\n\n// material ui\nimport {\n  Avatar,\n  Box,\n  CardContent,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  Radio,\n  Typography\n} from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nimport configData from '../../config';\nimport MainCard from '../../ui-component/cards/MainCard';\nimport { strings } from '../../localizedString';\nimport tether from '../../assets/images/icons/tether.svg';\nimport rial from '../../assets/images/icons/rial.svg';\nimport TomanConverter from '../../utils/convertor/TomanConvertor';\nimport Loader from '../../ui-component/Loader';\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n  cardContent: {\n    padding: '16px !important'\n  },\n  accountContainer: {\n    maxHeight: '300px',\n    width: '100%',\n    overflowY: 'scroll'\n  }\n}));\n\nconst TransferPage = () => {\n  const classes = useStyles();\n  const [accountWallet, setLimit] = useState(false);\n  const [accounts, setAccounts] = useState([]);\n  const [userOptions, setUserOpts] = useState({\n    to_account_id: 2,\n    from_account_id: 1,\n    amount: 10,\n    currency: 'usdt',\n    description: ''\n  });\n\n  const account = useSelector((state) => state.account);\n\n  function getLimitations() {\n    if (account)\n      // todo\n      // add account id to api\n      axios\n        .get(configData.API_SERVER + 'transfer/limit?account_id=1', { headers: { Authorization: `Token ${account.token}` } })\n        .then(function (response) {\n          setLimit(response.data);\n        })\n        .catch(function (error) {\n          console.log('error - ', error);\n        });\n  }\n\n  function getAccounts() {\n    // todo\n    // repace api\n    if (account)\n      axios\n        .get('https://randomuser.me/api/?results=10', { headers: { Authorization: `Token ${account.token}` } })\n        .then(function (response) {\n          setAccounts(response.data.results);\n        })\n        .catch(function (error) {\n          console.log('error - ', error);\n        });\n  }\n\n  useEffect(getLimitations, [account]);\n  useEffect(getAccounts, [account]);\n\n  if (!accountWallet) return <Loader />;\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Grid container gap={3} alignItems={'center'}>\n        <Grid item xs={12} sm={5} md={3}>\n          <MainCard border={false} elevation={16} content={false}>\n            <CardContent className={classes.cardContent}>\n              <Grid container direction=\"column\" spacing={0}>\n                <Grid item>\n                  <Typography variant=\"h4\">{strings?.selectTypeOfTransfer}</Typography>\n                </Grid>\n                <Grid item sx={{ mt: 5 }}>\n                  <Typography variant=\"subtitle\">{strings?.currentWallet}</Typography>\n                </Grid>\n              </Grid>\n              <List component=\"nav\">\n                <ListItemButton>\n                  <ListItemIcon>\n                    <Avatar alt=\"Tether\" src={tether} sx={{ width: 'auto', height: { sm: '100%', xs: 50 } }} />\n                  </ListItemIcon>\n                  <ListItemText primary={<Typography variant=\"h5\">{accountWallet.limit.usdt}</Typography>} />\n                </ListItemButton>\n                <ListItemButton>\n                  <ListItemIcon>\n                    <Avatar alt=\"Rial\" src={rial} sx={{ width: 'auto', height: { sm: '100%', xs: 50 } }} />\n                  </ListItemIcon>\n                  <ListItemText primary={<Typography variant=\"h5\">{TomanConverter(accountWallet.limit.irr)}</Typography>} />\n                </ListItemButton>\n              </List>\n            </CardContent>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MainCard border={false} elevation={16} content={false}>\n            <CardContent className={classes.cardContent}>\n              <Grid container direction=\"column\" spacing={0}>\n                <Grid item>\n                  <Typography variant=\"h4\">{strings?.messageForSelect}</Typography>\n                </Grid>\n              </Grid>\n              <List component=\"nav\" className={classes.accountContainer}>\n                {accounts.map((item, value) => (\n                  <>\n                    <ListItem\n                      key={value}\n                      secondaryAction={\n                        <Radio\n                          edge=\"end\"\n                          onClick={() => setUserOpts({ ...userOptions, to_account_id: value })}\n                          checked={userOptions.to_account_id === value}\n                          inputProps={{ 'aria-labelledby': value }}\n                        />\n                      }\n                      disablePadding\n                    >\n                      <ListItemButton>\n                        <ListItemAvatar>\n                          <Avatar alt={`Avatar n°${value + 1}`} src={item.picture.medium} />\n                        </ListItemAvatar>\n                        <ListItemText id={value} primary={[item.name.first, item.name.last].join(' ')} />\n                      </ListItemButton>\n                    </ListItem>\n                    <Divider variant=\"inset\" component=\"li\" />\n                  </>\n                ))}\n              </List>\n            </CardContent>\n          </MainCard>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TransferPage;\n"],"sourceRoot":""}
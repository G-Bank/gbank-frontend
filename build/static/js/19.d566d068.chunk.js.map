{"version":3,"sources":["ui-component/cards/MainCard.js","utils/convertor/TomanConvertor.js","assets/images/icons/tether.svg","assets/images/icons/rial.svg","views/transfer/index.js"],"names":["MainCard","_ref","title","titleButton","children","_jsxs","Box","my","width","display","alignItems","gap","_jsx","Typography","variant","mt","p","borderRadius","bgcolor","numberWithCommas","amount","toString","replace","splitCardNumber","number","split","reverse","join","Numbers","getPersianNumber","_numbers","arguments","length","undefined","_string","i","len","Texts","getPersianTextOfNumber","TomanConverter","toman","_Fragment","concat","useStyles","makeStyles","theme","cardContent","padding","accountContainer","maxHeight","overflowY","TransferPage","classes","_useState","useState","_useState2","_slicedToArray","accountWallet","setLimit","_useState3","_useState4","accounts","setAccounts","_useState5","to_account_id","from_account_id","currency","description","_useState6","userOptions","setUserOpts","account","useSelector","state","useEffect","axios","get","configData","API_SERVER","headers","Authorization","token","then","response","data","catch","error","console","log","results","sx","Grid","container","item","xs","sm","md","border","elevation","content","CardContent","className","direction","spacing","strings","selectTypeOfTransfer","currentWallet","List","component","ListItemButton","ListItemIcon","Avatar","alt","src","tether","height","ListItemText","primary","limit","usdt","rial","irr","messageForSelect","map","value","ListItem","secondaryAction","Radio","edge","onClick","_objectSpread","checked","inputProps","disablePadding","ListItemAvatar","picture","medium","id","name","first","last","Divider","Loader"],"mappings":"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","file":"static/js/19.d566d068.chunk.js","sourcesContent":["import { Box, Typography } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MainCard = ({ title, titleButton, children }) => {\r\n  return (\r\n    <Box my={2} width=\"100%\">\r\n      <Box display='flex' alignItems='center' gap={1}>\r\n        <Typography variant=\"h4\">{title}</Typography>\r\n        {titleButton}\r\n      </Box>\r\n      {children && (\r\n        <Box mt={1} p={2} borderRadius={4} width=\"100%\" bgcolor=\"white\">\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nMainCard.propTypes = {\r\n  title: PropTypes.string,\r\n  titleButton: PropTypes.node,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default MainCard;\r\n","const TomanConverter = (toman) => {\r\n  return <>{toman === 0 || toman === '0' ? <span>رایگان</span> : `${(toman * 10).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`}</>;\r\n};\r\n\r\nexport const numberWithCommas = (amount) => amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n\r\nexport const splitCardNumber = (number) =>\r\n  number.toString()\r\n    .split('')\r\n    .reverse()\r\n    .join('')\r\n    .replace(/\\B(?=(\\d{4})+(?!\\d))/g, ' ')\r\n    .split('')\r\n    .reverse()\r\n    .join('');\r\n\r\nconst Numbers = {\r\n  1: '۱',\r\n  2: '۲',\r\n  3: '۳',\r\n  4: '۴',\r\n  5: '۵',\r\n  6: '۶',\r\n  7: '۷',\r\n  8: '۸',\r\n  9: '۹',\r\n  0: '۰',\r\n  '.': '/',\r\n};\r\nexport const getPersianNumber = (number, commaSeparated = true) => {\r\n  if (!number && number !== 0) {\r\n    return '';\r\n  }\r\n  const _numbers = commaSeparated ? numberWithCommas(number) : number.toString();\r\n  let _string = '';\r\n  for (let i = 0, len = _numbers.length; i < len; i++) {\r\n    if (Numbers[_numbers[i]]) {\r\n      _string += Numbers[_numbers[i]];\r\n    } else {\r\n      _string += _numbers[i];\r\n    }\r\n  }\r\n  return _string;\r\n};\r\n\r\nconst Texts = {\r\n  0: 'صفر',\r\n  1: 'یک',\r\n  2: 'دو',\r\n  3: 'سه'\r\n};\r\n\r\nexport const getPersianTextOfNumber = (number) => Texts[number];\r\n\r\nexport default TomanConverter;\r\n","export default __webpack_public_path__ + \"static/media/tether.5f352747.svg\";","export default __webpack_public_path__ + \"static/media/rial.4066a453.svg\";","import { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// third party\r\nimport axios from 'axios';\r\n\r\n// material ui\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  CardContent,\r\n  Divider,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Radio,\r\n  Typography\r\n} from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nimport configData from '../../config';\r\nimport MainCard from '../../ui-component/cards/MainCard';\r\nimport { strings } from '../../localizedString';\r\nimport tether from '../../assets/images/icons/tether.svg';\r\nimport rial from '../../assets/images/icons/rial.svg';\r\nimport TomanConverter from '../../utils/convertor/TomanConvertor';\r\nimport Loader from '../../ui-component/Loader';\r\n\r\n// style const\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardContent: {\r\n    padding: '16px !important'\r\n  },\r\n  accountContainer: {\r\n    maxHeight: '300px',\r\n    width: '100%',\r\n    overflowY: 'scroll'\r\n  }\r\n}));\r\n\r\nconst TransferPage = () => {\r\n  const classes = useStyles();\r\n  const [accountWallet, setLimit] = useState(false);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [userOptions, setUserOpts] = useState({\r\n    to_account_id: 2,\r\n    from_account_id: 1,\r\n    amount: 10,\r\n    currency: 'usdt',\r\n    description: ''\r\n  });\r\n\r\n  const account = useSelector((state) => state.account);\r\n\r\n  function getLimitations() {\r\n    if (account)\r\n      // todo\r\n      // add account id to api\r\n      axios\r\n        .get(configData.API_SERVER + 'transfer/limit?account_id=1', { headers: { Authorization: `Token ${account.token}` } })\r\n        .then(function (response) {\r\n          setLimit(response.data);\r\n        })\r\n        .catch(function (error) {\r\n          console.log('error - ', error);\r\n        });\r\n  }\r\n\r\n  function getAccounts() {\r\n    // todo\r\n    // repace api\r\n    if (account)\r\n      axios\r\n        .get('https://randomuser.me/api/?results=10', { headers: { Authorization: `Token ${account.token}` } })\r\n        .then(function (response) {\r\n          setAccounts(response.data.results);\r\n        })\r\n        .catch(function (error) {\r\n          console.log('error - ', error);\r\n        });\r\n  }\r\n\r\n  useEffect(getLimitations, [account]);\r\n  useEffect(getAccounts, [account]);\r\n\r\n  if (!accountWallet) return <Loader />;\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Grid container gap={3} alignItems={'center'}>\r\n        <Grid item xs={12} sm={5} md={3}>\r\n          <MainCard border={false} elevation={16} content={false}>\r\n            <CardContent className={classes.cardContent}>\r\n              <Grid container direction=\"column\" spacing={0}>\r\n                <Grid item>\r\n                  <Typography variant=\"h4\">{strings?.selectTypeOfTransfer}</Typography>\r\n                </Grid>\r\n                <Grid item sx={{ mt: 5 }}>\r\n                  <Typography variant=\"subtitle\">{strings?.currentWallet}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <List component=\"nav\">\r\n                <ListItemButton>\r\n                  <ListItemIcon>\r\n                    <Avatar alt=\"Tether\" src={tether} sx={{ width: 'auto', height: { sm: '100%', xs: 50 } }} />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={<Typography variant=\"h5\">{accountWallet.limit.usdt}</Typography>} />\r\n                </ListItemButton>\r\n                <ListItemButton>\r\n                  <ListItemIcon>\r\n                    <Avatar alt=\"Rial\" src={rial} sx={{ width: 'auto', height: { sm: '100%', xs: 50 } }} />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={<Typography variant=\"h5\">{TomanConverter(accountWallet.limit.irr)}</Typography>} />\r\n                </ListItemButton>\r\n              </List>\r\n            </CardContent>\r\n          </MainCard>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <MainCard border={false} elevation={16} content={false}>\r\n            <CardContent className={classes.cardContent}>\r\n              <Grid container direction=\"column\" spacing={0}>\r\n                <Grid item>\r\n                  <Typography variant=\"h4\">{strings?.messageForSelect}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <List component=\"nav\" className={classes.accountContainer}>\r\n                {accounts.map((item, value) => (\r\n                  <>\r\n                    <ListItem\r\n                      key={value}\r\n                      secondaryAction={\r\n                        <Radio\r\n                          edge=\"end\"\r\n                          onClick={() => setUserOpts({ ...userOptions, to_account_id: value })}\r\n                          checked={userOptions.to_account_id === value}\r\n                          inputProps={{ 'aria-labelledby': value }}\r\n                        />\r\n                      }\r\n                      disablePadding\r\n                    >\r\n                      <ListItemButton>\r\n                        <ListItemAvatar>\r\n                          <Avatar alt={`Avatar n°${value + 1}`} src={item.picture.medium} />\r\n                        </ListItemAvatar>\r\n                        <ListItemText id={value} primary={[item.name.first, item.name.last].join(' ')} />\r\n                      </ListItemButton>\r\n                    </ListItem>\r\n                    <Divider variant=\"inset\" component=\"li\" />\r\n                  </>\r\n                ))}\r\n              </List>\r\n            </CardContent>\r\n          </MainCard>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TransferPage;\r\n"],"sourceRoot":""}